const D={username:"1234",password:"1234"};let I=sessionStorage.getItem("sellerLoggedIn")==="true",p=[],L=[],m=[],h=[];document.addEventListener("DOMContentLoaded",function(){document.getElementById("loginContainer"),document.getElementById("dashboard");const t=document.getElementById("loginForm"),e=document.getElementById("logoutBtn"),s=document.getElementById("errorMessage");b(),I?S():F(),t.addEventListener("submit",function(d){d.preventDefault();const o=document.getElementById("username").value,i=document.getElementById("password").value;o===D.username&&i===D.password?(sessionStorage.setItem("sellerLoggedIn","true"),I=!0,S(),t.reset(),s.classList.remove("show")):(s.textContent="Invalid username or password!",s.classList.add("show"))}),e.addEventListener("click",function(){sessionStorage.removeItem("sellerLoggedIn"),I=!1,F()});const n=document.querySelectorAll(".tab-btn"),c=document.querySelectorAll(".tab-content");n.forEach(d=>{d.addEventListener("click",function(){const o=this.dataset.tab;n.forEach(i=>i.classList.remove("active")),c.forEach(i=>i.classList.remove("active")),this.classList.add("active"),document.getElementById(o).classList.add("active")})});const a=document.getElementById("addProductForm"),u=document.getElementById("productImage"),r=document.getElementById("imagePreview"),k=document.getElementById("previewImg");u.addEventListener("change",function(d){const o=d.target.files[0];if(o){const i=new FileReader;i.onload=function(g){k.src=g.target.result,r.style.display="block"},i.readAsDataURL(o)}else r.style.display="none"}),a.addEventListener("submit",async function(d){d.preventDefault();const o=document.getElementById("itemType").value,i=document.getElementById("productName").value,g=parseFloat(document.getElementById("productPrice").value),$=document.getElementById("productDescription").value,P=u.files[0];if(!o){alert("Please select item type (Product or Service)");return}if(!P){alert("Please upload an image");return}try{console.log("Uploading image...");const l=new FormData;l.append("image",P);const f=await fetch("/api/upload-image",{method:"POST",body:l});if(!f.ok){const E=await f.json();throw new Error(E.error||"Failed to upload image")}const{path:w}=await f.json();console.log("Image uploaded:",w);const C=o==="product"?"/api/products":"/api/services";console.log(`Creating ${o}:`,{name:i,price:g,description:$,image:w});const y=await fetch(C,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:i,price:g,description:$,image:w})});if(!y.ok){const E=await y.json();throw new Error(E.error||`Failed to create ${o}`)}const A=await y.json();console.log(`${o} created:`,A),await b(),a.reset(),r.style.display="none";const v=document.getElementById("successMessage");v.textContent=`${o.charAt(0).toUpperCase()+o.slice(1)} added to database successfully!`,v.classList.add("show"),setTimeout(()=>v.classList.remove("show"),3e3)}catch(l){console.error("Error creating item:",l),alert(`Failed to add item: ${l.message}`)}}),B()});function F(){document.getElementById("loginContainer").style.display="flex",document.getElementById("dashboard").classList.remove("active")}function S(){document.getElementById("loginContainer").style.display="none",document.getElementById("dashboard").classList.add("active")}function B(){const t=document.getElementById("productGrid");t.innerHTML=m.map(e=>`
        <div class="product-card">
            <img src="${e.image}" alt="${e.name}" class="product-image">
            <div class="product-info">
                <h4>${e.name}</h4>
                <div class="product-price">$${e.price}</div>
                <p class="product-description">${e.description}</p>
                <button class="btn-delete" data-id="${e.id}">Delete from Database</button>
            </div>
        </div>
        `).join(""),document.querySelectorAll(".btn-delete[data-id]").forEach(e=>{e.addEventListener("click",function(){const s=parseInt(this.dataset.id);M(s)})})}async function M(t){if(confirm("Are you sure you want to delete this product? This will PERMANENTLY remove it from the database."))try{if(!m.find(r=>r.id===t)){alert("Item not found!");return}const s=p.some(r=>r.id===t),n=s?"product":"service",c=s?"/api/products":"/api/services";console.log(`Deleting ${n} with ID: ${t}`);const a=await fetch(`${c}/${t}`,{method:"DELETE"});if(!a.ok){const r=await a.json();throw new Error(r.error||"Failed to delete item")}const u=await a.json();console.log("Delete response:",u),alert("Item deleted successfully from database!"),await b()}catch(e){console.error("Error deleting product:",e),alert(`Failed to delete item: ${e.message}`)}}function T(){const t=document.getElementById("wishlistItems");if(h.length===0){t.innerHTML='<p style="text-align: center; color: #999;">No wishlist items yet.</p>';return}t.innerHTML=h.map(e=>`
        <div class="wishlist-item">
            <img src="${e.image}" alt="${e.name}" class="wishlist-image">
            <div class="wishlist-info">
                <h4>${e.name}</h4>
                <div class="wishlist-user">Price: $${e.price}</div>
                <div class="wishlist-date">${e.description}</div>
            </div>
        </div>
    `).join("")}async function b(){try{let t=[],e=[];try{const[s,n]=await Promise.all([fetch("/api/products"),fetch("/api/services")]);if(s.ok&&n.ok){const[c,a]=await Promise.all([s.json(),n.json()]);t=c.products||c||[],e=a.services||a||[]}else console.error("API returned non-ok status"),t=[],e=[]}catch(s){console.error("Failed to fetch from API:",s),t=[],e=[]}p=t||[],L=e||[],m=[...p,...L],B(),await j()}catch(t){console.error("Error loading products:",t),p=[],L=[],m=[],B(),j()}}async function j(){try{const t=await fetch("/api/wishlist");if(!t.ok)throw new Error("Failed to fetch wishlist");h=((await t.json()).wishlist||[]).map(n=>m.find(a=>String(a.id)===String(n.itemId))).filter(n=>n!==void 0),T()}catch(t){console.error("Error loading wishlist:",t),h=[],T()}}
